AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a jatos service behind a public load balancer.
             V3- Deploy jatos as service, connected to AWS RDS, with volume bind mounts to EFS for study_assets_root.
Parameters:
  EnvironmentName:
    Type: String
    Default: staging
    Description: The name of the environment to add this service to
  ServiceName:
    Type: String
    Default: jatos
    Description: A name for the service
  ImageUrl:
    Type: String
    Default: jatos/jatos:3.3.3
    Description: The url of a docker image that contains the application process that
                 will handle the traffic for this service
  ContainerPort:
    Type: Number
    Default: 9000
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  ContainerCommand:
    Type: CommaDelimitedList
    Default: ""
    Description: The command to run in the container upon initiation.
  Path:
    Type: String
    Default: "jatos*.mybrainandme.org"
    Description: A pattern in the host URL that directs traffic from the public load balancer to
                 this service. Use '*' to direct all traffic to this service.
  HealthCheckPath:
    Type: String
    Default: "/jatos/login"
    Description: Path on the container app to send health check signal to.
  ContainerMountPoint:
    Type: String
    Default: "/opt/docker/study_assets_root"
    Description: The path in the container to mount to host mount point.
  HostMountPoint:
    Type: String
    Default: "/efs/jatos/study_assets_root"
  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer. Set Priority to zero to
                 not add the service to the load balancer (i.e. for Celery Workers)
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run
  TaskRole:
    Type: String
    Default: ""
    Description: (Optional) An IAM task role to give the service's containers if the code within needs to
                 access other AWS resources like S3 buckets, DynamoDB tables, etc
  ExecutionRole:
    Type: String
    Default: "arn:aws:iam::413377292493:role/ecsTaskExecutionRole"
    Description: (Optional) An IAM execution role to give ECS permission to pull secrets and sensitive
                  data from AWS parameter store, etc
  VolumeName:
    Type: String
    Default: "EFSVolume"
    Description: Docker volume name for the EFS mount
  ParameterStore:
    Type: String
    Default: "arn:aws:ssm:us-east-1:413377292493:parameter"
    Description: "String to prepend for the full ARN for parameters such as XNAT credentials."

Conditions:
  HasCustomTaskRole: !Not [ !Equals [!Ref 'TaskRole', ''] ]
  HasCustomExecutionRole: !Not [ !Equals [!Ref 'ExecutionRole', ''] ]
  IsJatosService: !Equals [!Ref 'Priority', 1] # If Priority is 1 then this is for Jatos

Resources:
  # A log group for storing the stdout logs from this service's containers
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${EnvironmentName}-service-${ServiceName}

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Volumes:
      - Name: !Ref 'VolumeName'
        Host:
          SourcePath: !Ref 'HostMountPoint'

      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      TaskRoleArn:
        Fn::If:
          - 'HasCustomTaskRole'
          - !Ref 'TaskRole'
          - !Ref "AWS::NoValue"
      ExecutionRoleArn:
        Fn::If:
          - 'HasCustomExecutionRole'
          - !Ref 'ExecutionRole'
          - !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Sub ${EnvironmentName}-service-${ServiceName}
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'ServiceName'
          MountPoints:
            - ContainerPath: !Ref 'ContainerMountPoint'
              SourceVolume: !Ref 'VolumeName'
          Command: !Ref 'ContainerCommand'
          Secrets:
            - Name: PARAMETER_STORE_KEY_ID
              ValueFrom: !Sub
                - ${PREPEND}/AMAZON_KEY_ID
                - { PREPEND: !Ref ParameterStore }
            - Name: PARAMETER_STORE_SECRET_KEY
              ValueFrom: !Sub
                - ${PREPEND}/AMAZON_SECRET_KEY
                - { PREPEND: !Ref ParameterStore }
            - Name: JATOS_DB_PASSWORD
              ValueFrom: !Sub
                - ${PREPEND}/MYSQL_PASSWORD
                - { PREPEND: !Ref ParameterStore }
            - Name: JATOS_DB_USERNAME
              ValueFrom: !Sub
                - ${PREPEND}/MYSQL_USERNAME
                - { PREPEND: !Ref ParameterStore }

          Environment:
          # Pass the same environment variables to JATOS and MBaM app.
          - Name: JATOS_DB_URL
            Value: !Join
                    - ''
                    - - 'jdbc:mysql://'
                      - '{{resolve:ssm:MYSQL_HOST:1}}'
                      - '/brain_db?characterEncoding=UTF-8&useSSL=false'
          - Name: JATOS_DB_DRIVER
            Value: "com.mysql.jdbc.Driver"
          - Name: JATOS_JPA
            Value: "mysqlPersistenceUnit"
          # Access to Redis
          - Name: BROKER_URL
            Value:
              Fn::ImportValue: !Sub ${EnvironmentName}:RedisEndpoint

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster:
        Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Ref 'ServiceName'
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'TargetGroup'
      HealthCheckGracePeriodSeconds: 30

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Ref 'ServiceName'
      Port: 81
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}:VpcId

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: !If [IsJatosService, host-header, path-pattern ]
          Values: [!Ref 'Path']
      ListenerArn:
        Fn::ImportValue: !Sub ${EnvironmentName}:PublicListener
      Priority: !Ref 'Priority'

  # Enable autoscaling for this service
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: Service
    Properties:
      ServiceNamespace: 'ecs'
      ScalableDimension: 'ecs:service:DesiredCount'
      ResourceId:
        Fn::Join:
          - '/'
          - - service
            - Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
            - !Ref 'ServiceName'
      MinCapacity: 1
      MaxCapacity: 4
      RoleARN:
        Fn::ImportValue: !Sub ${EnvironmentName}:AutoscalingRole

  # Create scaling policies for the service
  ScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ScalableTarget
    Properties:
      PolicyName:
        Fn::Join:
          - '/'
          - - scale
            - !Ref 'EnvironmentName'
            - !Ref 'ServiceName'
            - down
      PolicyType: StepScaling
      ResourceId:
        Fn::Join:
          - '/'
          - - service
            - Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
            - !Ref 'ServiceName'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: 'ecs'
      StepScalingPolicyConfiguration:
        AdjustmentType: 'ChangeInCapacity'
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1
        MetricAggregationType: 'Average'
        Cooldown: 60

  ScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ScalableTarget
    Properties:
      PolicyName:
        Fn::Join:
          - '/'
          - - scale
            - !Ref 'EnvironmentName'
            - !Ref 'ServiceName'
            - up
      PolicyType: StepScaling
      ResourceId:
        Fn::Join:
          - '/'
          - - service
            - Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
            - !Ref 'ServiceName'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: 'ecs'
      StepScalingPolicyConfiguration:
        AdjustmentType: 'ChangeInCapacity'
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 15
            ScalingAdjustment: 1
          - MetricIntervalLowerBound: 15
            MetricIntervalUpperBound: 25
            ScalingAdjustment: 2
          - MetricIntervalLowerBound: 25
            ScalingAdjustment: 3
        MetricAggregationType: 'Average'
        Cooldown: 60

  # Create alarms to trigger these policies
  LowCpuUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        Fn::Join:
          - '-'
          - - low-cpu
            - !Ref 'EnvironmentName'
            - !Ref 'ServiceName'
      AlarmDescription:
        Fn::Join:
          - ' '
          - - "Low CPU utilization for service"
            - !Ref 'ServiceName'
            - "in environment"
            - !Ref 'EnvironmentName'
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: !Ref 'ServiceName'
        - Name: ClusterName
          Value:
            Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 20
      ComparisonOperator: LessThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleDownPolicy

  HighCpuUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        Fn::Join:
          - '-'
          - - high-cpu
            - !Ref 'EnvironmentName'
            - !Ref 'ServiceName'
      AlarmDescription:
        Fn::Join:
          - ' '
          - - "High CPU utilization for service"
            - !Ref 'ServiceName'
            - "in environment"
            - !Ref 'EnvironmentName'
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: !Ref 'ServiceName'
        - Name: ClusterName
          Value:
            Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 70
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleUpPolicy
