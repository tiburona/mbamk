AWSTemplateFormatVersion: '2010-09-09'
Description: External, public facing load balancer, for forwarding public traffic to containers.
             V2 - Adds https listener and also CNAME records pointing ENVIRONMENTNAME.mybrainandme.org
             and jatos-ENVIRONMENTNAME.mybrainandme.org to output DNS.
Parameters:
  EnvironmentName:
    Type: String
    Default: staging
    Description: The name of the environment to add this load balancer to
  URLSUBDOMAIN:
    Type: String
    Default: staging
    Description: The prefix for the URL PREFIX.myBrainandMe.org to direct to the
                 DNS for the ALB. This will automatically add a URL for JATOS in the
                 form jatos-PREFIX.mybrainandme.org.
Resources:
  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId:
        Fn::ImportValue: !Sub ${EnvironmentName}:ContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'PublicLoadBalancerSG'

  # Public load balancer, hosted in public subnets that is accessible
  # to the public, and is intended to route traffic to one or more public
  # facing services. This is used for accepting traffic from the public
  # internet and directing it to public facing microservices
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}:VpcId
      SecurityGroupIngress:
          # Allow access to ALB from anywhere on the internet
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        # The load balancer is placed into the public subnets, so that traffic
        # from the internet can reach the load balancer directly via the internet gateway
        - Fn::ImportValue: !Sub ${EnvironmentName}:PublicSubnetOne
        - Fn::ImportValue: !Sub ${EnvironmentName}:PublicSubnetTwo
      SecurityGroups: [!Ref 'PublicLoadBalancerSG']

  # A dummy target group is used to setup the ALB to just drop traffic
  # initially, before any real service target groups have been added.
  DummyTargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}:VpcId

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: PublicLoadBalancer
    Properties:
      DefaultActions:
       - Type: "redirect"
         RedirectConfig:
           Protocol: "HTTPS"
           Port: "443"
           Host: "#{host}"
           Path: "/#{path}"
           Query: "#{query}"
           StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: 80
      Protocol: "HTTP"
  # Set up the https listener on port 443 that will forward traffic to target groups
  PublicLoadBalancerHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: arn:aws:acm:us-east-1:413377292493:certificate/610aec39-2125-49ea-8d98-5bbf205cf32c
      DefaultActions:
        - TargetGroupArn: !Ref DummyTargetGroupPublic
          Type: forward
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: 443
      Protocol: "HTTPS"

  # Add CNAME records
  DNSRecords:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: mybrainandme.org.
      RecordSets:
      - Name: !Sub ${URLSUBDOMAIN}.mybrainandme.org.
        Type: CNAME
        TTL: '900'
        Weight: '1'
        SetIdentifier: Flask app frontend
        ResourceRecords:
        - !Sub ${PublicLoadBalancer.DNSName}
      - Name: !Sub jatos-${URLSUBDOMAIN}.mybrainandme.org.
        Type: CNAME
        TTL: '900'
        Weight: '1'
        SetIdentifier: JATOS frontend
        ResourceRecords:
        - !Sub ${PublicLoadBalancer.DNSName}

Outputs:
  PublicListener:
    Description: The ARN of the public load balancer's Listener
    Value: !Ref PublicLoadBalancerHTTPSListener
    Export:
      Name: !Sub ${EnvironmentName}:PublicListener
  ExternalUrl:
    Description: The url of the external load balancer
    Value: !Sub http://${PublicLoadBalancer.DNSName}
    Export:
      Name: !Sub ${EnvironmentName}:ExternalUrl
