AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service into an ECS cluster behind a public load balancer.
             V1 - Deploy celery worker as service.
Parameters:
  EnvironmentName:
    Type: String
    Default: staging
    Description: The name of the environment to add this service to
  ServiceName:
    Type: String
    Default: celery
    Description: A name for the service.
  ImageUrl:
    Type: String
    Default: 413377292493.dkr.ecr.us-east-1.amazonaws.com/mbam/flask-app:2301dab
    Description: The url of a docker image that contains the application process that
                 will handle the traffic for this service
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 384
    Description: How much memory in megabytes to give the container
  ContainerCommand:
    Type: CommaDelimitedList
    Default: "celery -A cookiecutter_mbam.run_celery:celery worker --pool=gevent --concurrency=500 --loglevel info"
    Description: The command to run in the container upon initiation.
  ContainerWorkingDirectory:
    Type: String
    Default: "/app"
    Description: The working directory for the container.
  ContainerMountPoint:
    Type: String
    Default: "/app/cookiecutter_mbam/static/files"
    Description: The path in the container to mount to host mount point.
  HostMountPoint:
    Type: String
    Default: "/efs/mbam/user-data"
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run
  TaskRole:
    Type: String
    Default: ""
    Description: (Optional) An IAM task role to give the service's containers if the code within needs to
                 access other AWS resources like S3 buckets, DynamoDB tables, etc
  ExecutionRole:
    Type: String
    Default: "arn:aws:iam::413377292493:role/ecsTaskExecutionRole"
    Description: (Optional) An IAM execution role to give ECS permission to pull secrets and sensitive
                  data from AWS parameter store, etc
  VolumeName:
    Type: String
    Default: "EFSVolume"
    Description: Docker volume name for the EFS mount
  ParameterStore:
    Type: String
    Default: "arn:aws:ssm:us-east-1:413377292493:parameter"
    Description: "String to prepend for the full ARN for parameters such as XNAT credentials."


Conditions:
  HasCustomTaskRole: !Not [ !Equals [!Ref 'TaskRole', ''] ]
  HasCustomExecutionRole: !Not [ !Equals [!Ref 'ExecutionRole', ''] ]

Resources:
  # A log group for storing the stdout logs from this service's containers
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${EnvironmentName}-service-${ServiceName}

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Volumes:
      - Name: !Ref 'VolumeName'
        Host:
          SourcePath: !Ref 'HostMountPoint'

      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: 'host'
      TaskRoleArn:
        Fn::If:
          - 'HasCustomTaskRole'
          - !Ref 'TaskRole'
          - !Ref "AWS::NoValue"
      ExecutionRoleArn:
        Fn::If:
          - 'HasCustomExecutionRole'
          - !Ref 'ExecutionRole'
          - !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Sub ${EnvironmentName}-service-${ServiceName}
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'ServiceName'
          MountPoints:
            - ContainerPath: !Ref 'ContainerMountPoint'
              SourceVolume: !Ref 'VolumeName'
          # EntryPoint: ["bash","-c"]
          Command: !Ref 'ContainerCommand'
          WorkingDirectory: !Ref 'ContainerWorkingDirectory'
          Secrets:
            - Name: PARAMETER_STORE_KEY_ID
              ValueFrom: !Sub
                - ${PREPEND}/AMAZON_KEY_ID
                - { PREPEND: !Ref ParameterStore }
            - Name: PARAMETER_STORE_SECRET_KEY
              ValueFrom: !Sub
                - ${PREPEND}/AMAZON_SECRET_KEY
                - { PREPEND: !Ref ParameterStore }
            - Name: JATOS_DB_PASSWORD
              ValueFrom: !Sub
                - ${PREPEND}/MYSQL_PASSWORD
                - { PREPEND: !Ref ParameterStore }
            - Name: JATOS_DB_USERNAME
              ValueFrom: !Sub
                - ${PREPEND}/MYSQL_USERNAME
                - { PREPEND: !Ref ParameterStore }

          Environment:
          # Pass the same environment variables to JATOS and MBaM app.
          - Name: JATOS_DB_URL
            Value: !Join
                    - ''
                    - - 'jdbc:mysql://'
                      - '{{resolve:ssm:MYSQL_HOST:1}}'
                      - '/brain_db?characterEncoding=UTF-8&useSSL=false'
          - Name: JATOS_DB_DRIVER
            Value: "com.mysql.jdbc.Driver"
          - Name: JATOS_JPA
            Value: "mysqlPersistenceUnit"
          # Access to Redis
          - Name: BROKER_URL
            Value:
              Fn::ImportValue: !Sub ${EnvironmentName}:RedisEndpoint

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster:
        Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      TaskDefinition: !Ref 'TaskDefinition'
      # PlacementConstraints:
      #   - Expression: !Sub
      #     - task:group == ${GroupName}
      #     - { GroupName: !Ref Grouping }
      #     Type: memberOf

  # Enable autoscaling for this service
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: Service
    Properties:
      ServiceNamespace: 'ecs'
      ScalableDimension: 'ecs:service:DesiredCount'
      ResourceId:
        Fn::Join:
          - '/'
          - - service
            - Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
            - !Ref 'ServiceName'
      MinCapacity: 1
      MaxCapacity: 2
      RoleARN:
        Fn::ImportValue: !Sub ${EnvironmentName}:AutoscalingRole

  # Create scaling policies for the service
  ScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ScalableTarget
    Properties:
      PolicyName:
        Fn::Join:
          - '/'
          - - scale
            - !Ref 'EnvironmentName'
            - !Ref 'ServiceName'
            - down
      PolicyType: StepScaling
      ResourceId:
        Fn::Join:
          - '/'
          - - service
            - Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
            - !Ref 'ServiceName'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: 'ecs'
      StepScalingPolicyConfiguration:
        AdjustmentType: 'ChangeInCapacity'
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1
        MetricAggregationType: 'Average'
        Cooldown: 60

  ScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ScalableTarget
    Properties:
      PolicyName:
        Fn::Join:
          - '/'
          - - scale
            - !Ref 'EnvironmentName'
            - !Ref 'ServiceName'
            - up
      PolicyType: StepScaling
      ResourceId:
        Fn::Join:
          - '/'
          - - service
            - Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
            - !Ref 'ServiceName'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: 'ecs'
      StepScalingPolicyConfiguration:
        AdjustmentType: 'ChangeInCapacity'
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 15
            ScalingAdjustment: 1
          - MetricIntervalLowerBound: 15
            MetricIntervalUpperBound: 25
            ScalingAdjustment: 2
          - MetricIntervalLowerBound: 25
            ScalingAdjustment: 3
        MetricAggregationType: 'Average'
        Cooldown: 60

  # Create alarms to trigger these policies
  LowCpuUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        Fn::Join:
          - '-'
          - - low-cpu
            - !Ref 'EnvironmentName'
            - !Ref 'ServiceName'
      AlarmDescription:
        Fn::Join:
          - ' '
          - - "Low CPU utilization for service"
            - !Ref 'ServiceName'
            - "in environment"
            - !Ref 'EnvironmentName'
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: !Ref 'ServiceName'
        - Name: ClusterName
          Value:
            Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 20
      ComparisonOperator: LessThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleDownPolicy

  HighCpuUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        Fn::Join:
          - '-'
          - - high-cpu
            - !Ref 'EnvironmentName'
            - !Ref 'ServiceName'
      AlarmDescription:
        Fn::Join:
          - ' '
          - - "High CPU utilization for service"
            - !Ref 'ServiceName'
            - "in environment"
            - !Ref 'EnvironmentName'
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: !Ref 'ServiceName'
        - Name: ClusterName
          Value:
            Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 70
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleUpPolicy
