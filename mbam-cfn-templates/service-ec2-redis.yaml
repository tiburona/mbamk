AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service into an ECS cluster behind a public load balancer.
             V1 - Deploy redis as daemon service (one task per EC2 instance) bound to
             port 6379 of the container host.
Parameters:
  EnvironmentName:
    Type: String
    Default: development
    Description: The name of the environment to add this service to
  ServiceName:
    Type: String
    Default: cfn-redis
    Description: A name for the service
  ImageUrl:
    Type: String
    Default: redis:5.0.3-alpine
    Description: The url of a docker image that contains the application process that
                 will handle the traffic for this service
  ContainerPort:
    Type: Number
    Default: 6379
    Description: What port number the application inside the docker container is binding to.
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 256
    Description: How much memory in megabytes to give the container
  ContainerCommand:
    Type: CommaDelimitedList
    Default: "redis-server"
    Description: The command to run in the container upon initiation.
  ContainerWorkingDirectory:
    Type: String
    Default: "/data"
    Description: The working directory for the container.

  Role:
    Type: String
    Default: ""
    Description: (Optional) An IAM role to give the service's containers if the code within needs to
                 access other AWS resources like S3 buckets, DynamoDB tables, etc

Conditions:
  HasCustomRole: !Not [ !Equals [!Ref 'Role', ''] ]

Resources:
  # A log group for storing the stdout logs from this service's containers
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${EnvironmentName}-service-${ServiceName}

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: 'host'
      TaskRoleArn:
        Fn::If:
          - 'HasCustomRole'
          - !Ref 'Role'
          - !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          PortMappings:
            - HostPort: !Ref 'ContainerPort'
              ContainerPort: !Ref 'ContainerPort'
              Protocol: "tcp"
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Sub ${EnvironmentName}-service-${ServiceName}
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'ServiceName'
          Command: !Ref 'ContainerCommand'
          WorkingDirectory: !Ref 'ContainerWorkingDirectory'

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster:
        Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
      SchedulingStrategy: "DAEMON"
      TaskDefinition: !Ref 'TaskDefinition'
