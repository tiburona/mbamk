versions pytest-3.9.3, py-1.6.0, python-3.6.2.final.0
cwd=/Users/katie/spiro/mbam/cookiecutter_mbam/tests
args=['xnat_tests.py', '--debug', '-k', 'test_nifti_uploads_to_cloud']

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x10a6f9f60>
    pytest_plugin_registered [hook]
        plugin: <Session 'tests'>
        manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x10a6f9f60>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x10e5333c8>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x10e533630>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: unittest.mock [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x10e549fd0>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: py._io [assertion]
    early skip of rewriting module: py._io.terminalwriter [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x10a66c668>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x10a6f9f60>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.resultlog' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/resultlog.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_mock' from '/Users/katie/anaconda/lib/python3.6/site-packages/pytest_mock.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_factoryboy.plugin' from '/Users/katie/anaconda/lib/python3.6/site-packages/pytest_factoryboy/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'celery.contrib.pytest' from '/Users/katie/anaconda/lib/python3.6/site-packages/celery/contrib/pytest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.capture.CaptureManager object at 0x10ac58438>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'tests.conftest' from '/Users/katie/spiro/mbam/cookiecutter_mbam/tests/conftest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session 'tests'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x10e5333c8>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x10e533630>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x10e549fd0>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x10e55ba58>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session 'tests'>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x10a66c668>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x10a6f9f60>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.resultlog' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/resultlog.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_mock' from '/Users/katie/anaconda/lib/python3.6/site-packages/pytest_mock.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_factoryboy.plugin' from '/Users/katie/anaconda/lib/python3.6/site-packages/pytest_factoryboy/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'celery.contrib.pytest' from '/Users/katie/anaconda/lib/python3.6/site-packages/celery/contrib/pytest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.capture.CaptureManager object at 0x10ac58438>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'tests.conftest' from '/Users/katie/spiro/mbam/cookiecutter_mbam/tests/conftest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session 'tests'>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x10e5333c8>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x10e533630>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x10e549fd0>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x10e55ba58>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x10e56f438>
          manager: <_pytest.config.PytestPluginManager object at 0x10a66c668>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x10a6f9f60>
          startdir: /Users/katie/spiro/mbam/cookiecutter_mbam/tests
      finish pytest_report_header --> [['rootdir: /Users/katie/spiro/mbam/cookiecutter_mbam/tests, inifile:', 'plugins: mock-1.10.0, factoryboy-2.0.2, celery-4.2.1'], ['using: pytest-3.9.3 pylib-1.6.0', 'setuptools registered plugins:', '  pytest-mock-1.10.0 at /Users/katie/anaconda/lib/python3.6/site-packages/pytest_mock.py', '  pytest-factoryboy-2.0.2 at /Users/katie/anaconda/lib/python3.6/site-packages/pytest_factoryboy/plugin.py', '  celery-4.2.1 at /Users/katie/anaconda/lib/python3.6/site-packages/celery/contrib/pytest.py']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session 'tests'>
    perform_collect <Session 'tests'> ['xnat_tests.py'] [collection]
        pytest_collectstart [hook]
            collector: <Session 'tests'>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session 'tests'>
        processing argument /Users/katie/spiro/mbam/cookiecutter_mbam/tests/xnat_tests.py [collection]
            pytest_ignore_collect [hook]
                path: /Users/katie/spiro/mbam/cookiecutter_mbam/tests/__init__.py
                config: <_pytest.config.Config object at 0x10a6f9f60>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/katie/spiro/mbam/cookiecutter_mbam/tests/__init__.py
                parent: <Session 'tests'>
              pytest_pycollect_makemodule [hook]
                  path: /Users/katie/spiro/mbam/cookiecutter_mbam/tests/__init__.py
                  parent: <Session 'tests'>
              finish pytest_pycollect_makemodule --> <Package '/Users/katie/spiro/mbam/cookiecutter_mbam/tests'> [hook]
            finish pytest_collect_file --> [<Package '/Users/katie/spiro/mbam/cookiecutter_mbam/tests'>] [hook]
            pytest_collect_file [hook]
                path: /Users/katie/spiro/mbam/cookiecutter_mbam/tests/xnat_tests.py
                parent: <Package '/Users/katie/spiro/mbam/cookiecutter_mbam/tests'>
              pytest_pycollect_makemodule [hook]
                  path: /Users/katie/spiro/mbam/cookiecutter_mbam/tests/xnat_tests.py
                  parent: <Package '/Users/katie/spiro/mbam/cookiecutter_mbam/tests'>
              finish pytest_pycollect_makemodule --> <Module 'xnat_tests.py'> [hook]
            finish pytest_collect_file --> [<Module 'xnat_tests.py'>] [hook]
          matchnodes [<Module 'xnat_tests.py'>] [] [collection]
            matchnodes finished ->  1 nodes [collection]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=1 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=1 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Module 'xnat_tests.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'xnat_tests.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'xnat_tests.py'>
      find_module called for: tests.xnat_tests [assertion]
      matched test file (was specified on cmdline): '/Users/katie/spiro/mbam/cookiecutter_mbam/tests/xnat_tests.py' [assertion]
      _read_pyc(/Users/katie/spiro/mbam/cookiecutter_mbam/tests/xnat_tests.py): invalid or out of date pyc [assertion]
      rewriting '/Users/katie/spiro/mbam/cookiecutter_mbam/tests/xnat_tests.py' [assertion]
      find_module called for: tests.test_scan_upload [assertion]
      matched test file '/Users/katie/spiro/mbam/cookiecutter_mbam/tests/test_scan_upload.py' [assertion]
      found cached rewritten pyc for '/Users/katie/spiro/mbam/cookiecutter_mbam/tests/test_scan_upload.py' [assertion]
      early skip of rewriting module: mock [assertion]
      early skip of rewriting module: mock.mock [assertion]
      early skip of rewriting module: pbr [assertion]
      early skip of rewriting module: pbr.version [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __name__
            obj: tests.xnat_tests
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __package__
            obj: tests
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10a805f98>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __spec__
            obj: ModuleSpec(name='tests.xnat_tests', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10a805f98>, origin='/Users/katie/spiro/mbam/cookiecutter_mbam/tests/xnat_tests.py')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __file__
            obj: /Users/katie/spiro/mbam/cookiecutter_mbam/tests/xnat_tests.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __cached__
            obj: /Users/katie/spiro/mbam/cookiecutter_mbam/tests/__pycache__/xnat_tests.cpython-36-PYTEST.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'BufferError': <class 'BufferError'>, 'MemoryError': <class 'MemoryError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2017 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Users/katie/anaconda/lib/python3.6/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: os
            obj: <module 'os' from '/Users/katie/anaconda/lib/python3.6/os.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: json
            obj: <module 'json' from '/Users/katie/anaconda/lib/python3.6/json/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: pytest
            obj: <module 'pytest' from '/Users/katie/anaconda/lib/python3.6/site-packages/pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: ScanUploadSetup
            obj: <class 'tests.test_scan_upload.ScanUploadSetup'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: small_set_of_params
            obj: [(1, 0, '000001_MR1', 'T1_1', '/data/archive/experiments/000001_MR1', '/data/archive/experiments/000001_MR1/scans/T1_1', 'user/000001/experiment/1/scan/T1_1')]
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: scan_service
            obj: <function scan_service at 0x10e5cd2f0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: TestXNATUploads
            obj: <class 'tests.xnat_tests.TestXNATUploads'>
        finish pytest_pycollect_makeitem --> <Class 'TestXNATUploads'> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: TestCloudUploads
            obj: <class 'tests.xnat_tests.TestCloudUploads'>
        finish pytest_pycollect_makeitem --> <Class 'TestCloudUploads'> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __new__
            obj: <built-in method __new__ of type object at 0x109908160>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'xnat_tests.py'>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'xnat_tests.py' lenresult=2 outcome='passed'> [hook]
    genitems <Class 'TestXNATUploads'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestXNATUploads'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestXNATUploads'>
      finish pytest_make_collect_report --> <CollectReport 'xnat_tests.py::TestXNATUploads' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __module__
            obj: tests.xnat_tests
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __doc__
            obj: A class to test that scans can be uploaded to XNAT
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: get_test_values
            obj: <function TestXNATUploads.get_test_values at 0x10e5df9d8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: common_tests_for_dicom_and_nifti
            obj: <function TestXNATUploads.common_tests_for_dicom_and_nifti at 0x10e5e2048>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: test_nifti_uploads_to_xnat
            obj: <function TestXNATUploads.test_nifti_uploads_to_xnat at 0x10e5e20d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10e5ac7f0>
          early skip of rewriting module: py._io.saferepr [assertion]
          early skip of rewriting module: repr [assertion]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x10a6f9f60>
                val: T1.nii.gz
                argname: filename
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x10a6f9f60>
                val: structural.nii
                argname: filename
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x10a6f9f60>
                val: (1, 0, '000001_MR1', 'T1_1', '/data/archive/experiments/000001_MR1', '/data/archive/experiments/000001_MR1/scans/T1_1', 'user/000001/experiment/1/scan/T1_1')
                argname: scan_service
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_nifti_uploads_to_xnat[T1.nii.gz-scan_service0]'>, <Function 'test_nifti_uploads_to_xnat[structural.nii-scan_service0]'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: test_dicom_uploads_to_xnat
            obj: <function TestXNATUploads.test_dicom_uploads_to_xnat at 0x10e5e2158>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10e5b1908>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x10a6f9f60>
                val: (1, 0, '000001_MR1', 'T1_1', '/data/archive/experiments/000001_MR1', '/data/archive/experiments/000001_MR1/scans/T1_1', 'user/000001/experiment/1/scan/T1_1')
                argname: scan_service
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_dicom_uploads_to_xnat[scan_service0]'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: pytestmark
            obj: [Mark(name='parametrize', args=('scan_service', [(1, 0, '000001_MR1', 'T1_1', '/data/archive/experiments/000001_MR1', '/data/archive/experiments/000001_MR1/scans/T1_1', 'user/000001/experiment/1/scan/T1_1')]), kwargs={'indirect': True})]
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: copy_file_to_upload_dest
            obj: <function ScanUploadSetup.copy_file_to_upload_dest at 0x10e5df0d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: create_file_to_upload
            obj: <function ScanUploadSetup.create_file_to_upload at 0x10e5df2f0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: add_a_scan
            obj: <function ScanUploadSetup.add_a_scan at 0x10e5df378>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: open_file_storage_obj
            obj: <function ScanUploadSetup.open_file_storage_obj at 0x10e5df400>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: setup_tests
            obj: <function ScanUploadSetup.setup_tests at 0x10e5df488>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __dict__
            obj: <attribute '__dict__' of 'ScanUploadSetup' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __weakref__
            obj: <attribute '__weakref__' of 'ScanUploadSetup' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __new__
            obj: <built-in method __new__ of type object at 0x10990c4d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'xnat_tests.py::TestXNATUploads::()' lenresult=3 outcome='passed'> [hook]
    genitems <Function 'test_nifti_uploads_to_xnat[T1.nii.gz-scan_service0]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_nifti_uploads_to_xnat[T1.nii.gz-scan_service0]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_nifti_uploads_to_xnat[structural.nii-scan_service0]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_nifti_uploads_to_xnat[structural.nii-scan_service0]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_dicom_uploads_to_xnat[scan_service0]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_dicom_uploads_to_xnat[scan_service0]'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'xnat_tests.py::TestXNATUploads::()' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'xnat_tests.py::TestXNATUploads' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class 'TestCloudUploads'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestCloudUploads'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestCloudUploads'>
      finish pytest_make_collect_report --> <CollectReport 'xnat_tests.py::TestCloudUploads' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __module__
            obj: tests.xnat_tests
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: test_nifti_uploads_to_cloud
            obj: <function TestCloudUploads.test_nifti_uploads_to_cloud at 0x10e5e21e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10e5b3748>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x10a6f9f60>
                val: T1.nii.gz
                argname: filename
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x10a6f9f60>
                val: structural.nii
                argname: filename
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x10a6f9f60>
                val: (1, 0, '000001_MR1', 'T1_1', '/data/archive/experiments/000001_MR1', '/data/archive/experiments/000001_MR1/scans/T1_1', 'user/000001/experiment/1/scan/T1_1')
                argname: scan_service
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>, <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: pytestmark
            obj: [Mark(name='parametrize', args=('scan_service', [(1, 0, '000001_MR1', 'T1_1', '/data/archive/experiments/000001_MR1', '/data/archive/experiments/000001_MR1/scans/T1_1', 'user/000001/experiment/1/scan/T1_1')]), kwargs={'indirect': True})]
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: copy_file_to_upload_dest
            obj: <function ScanUploadSetup.copy_file_to_upload_dest at 0x10e5df0d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: create_file_to_upload
            obj: <function ScanUploadSetup.create_file_to_upload at 0x10e5df2f0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: add_a_scan
            obj: <function ScanUploadSetup.add_a_scan at 0x10e5df378>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: open_file_storage_obj
            obj: <function ScanUploadSetup.open_file_storage_obj at 0x10e5df400>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: setup_tests
            obj: <function ScanUploadSetup.setup_tests at 0x10e5df488>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __dict__
            obj: <attribute '__dict__' of 'ScanUploadSetup' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __weakref__
            obj: <attribute '__weakref__' of 'ScanUploadSetup' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __new__
            obj: <built-in method __new__ of type object at 0x10990c4d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance '()'>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'xnat_tests.py::TestCloudUploads::()' lenresult=2 outcome='passed'> [hook]
    genitems <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'xnat_tests.py::TestCloudUploads::()' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'xnat_tests.py::TestCloudUploads' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'xnat_tests.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session 'tests'>
          config: <_pytest.config.Config object at 0x10a6f9f60>
          items: [<Function 'test_nifti_uploads_to_xnat[T1.nii.gz-scan_service0]'>, <Function 'test_nifti_uploads_to_xnat[structural.nii-scan_service0]'>, <Function 'test_dicom_uploads_to_xnat[scan_service0]'>, <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>, <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>]
        pytest_deselected [hook]
            items: [<Function 'test_nifti_uploads_to_xnat[T1.nii.gz-scan_service0]'>, <Function 'test_nifti_uploads_to_xnat[structural.nii-scan_service0]'>, <Function 'test_dicom_uploads_to_xnat[scan_service0]'>]
        finish pytest_deselected --> [] [hook]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session 'tests'>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x10a6f9f60>
            startdir: /Users/katie/spiro/mbam/cookiecutter_mbam/tests
            items: [<Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>, <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>]
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> [<Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>, <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>] [hook]
    pytest_runtestloop [hook]
        session: <Session 'tests'>
      pytest_runtest_protocol [hook]
          item: <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>
          nextitem: <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>
        pytest_runtest_logstart [hook]
            nodeid: xnat_tests.py::TestCloudUploads::()::test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]
            location: ('xnat_tests.py', 48, 'TestCloudUploads.test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]')
        early skip of rewriting module: py._io.capture [assertion]
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='pytestconfig' scope='session' baseid=''>
              request: <SubRequest 'pytestconfig' for <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>>
          finish pytest_fixture_setup --> <_pytest.config.Config object at 0x10a6f9f60> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='app' scope='function' baseid=''>
              request: <SubRequest 'app' for <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>>
          early skip of rewriting module: tests.settings [assertion]
          early skip of rewriting module: flask_caching.jinja2ext [assertion]
          early skip of rewriting module: flask_caching.backends [assertion]
          early skip of rewriting module: flask_caching.backends.backends [assertion]
          early skip of rewriting module: werkzeug.contrib [assertion]
          early skip of rewriting module: werkzeug.contrib.cache [assertion]
          early skip of rewriting module: cPickle [assertion]
          early skip of rewriting module: werkzeug.posixemulation [assertion]
          early skip of rewriting module: flask_caching.backends.clients [assertion]
          early skip of rewriting module: passlib.handlers [assertion]
          early skip of rewriting module: passlib.handlers.bcrypt [assertion]
          early skip of rewriting module: passlib.handlers.des_crypt [assertion]
          early skip of rewriting module: passlib.crypto [assertion]
          early skip of rewriting module: passlib.crypto.des [assertion]
          early skip of rewriting module: passlib.handlers.pbkdf2 [assertion]
          early skip of rewriting module: passlib.crypto.digest [assertion]
          early skip of rewriting module: fastpbkdf2 [assertion]
          early skip of rewriting module: passlib.handlers.sha2_crypt [assertion]
          early skip of rewriting module: passlib.handlers.misc [assertion]
          early skip of rewriting module: passlib.handlers.digests [assertion]
          early skip of rewriting module: flask_security.cli [assertion]
          early skip of rewriting module: flask.testing [assertion]
          early skip of rewriting module: click.testing [assertion]
          early skip of rewriting module: werkzeug.test [assertion]
          early skip of rewriting module: urllib2 [assertion]
          finish pytest_fixture_setup --> <Flask 'cookiecutter_mbam'> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='db' scope='function' baseid=''>
              request: <SubRequest 'db' for <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>>
          early skip of rewriting module: sqlalchemy.dialects.sqlite [assertion]
          early skip of rewriting module: sqlalchemy.dialects.sqlite.base [assertion]
          early skip of rewriting module: sqlalchemy.dialects.sqlite.pysqlite [assertion]
          early skip of rewriting module: sqlalchemy.dialects.sqlite.pysqlcipher [assertion]
          early skip of rewriting module: pysqlite2 [assertion]
          early skip of rewriting module: sqlite3 [assertion]
          early skip of rewriting module: sqlite3.dbapi2 [assertion]
          early skip of rewriting module: _sqlite3 [assertion]
          finish pytest_fixture_setup --> <SQLAlchemy engine=sqlite://> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='mocker' scope='function' baseid=''>
              request: <SubRequest 'mocker' for <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>>
          finish pytest_fixture_setup --> <pytest_mock.MockFixture object at 0x10e6c04a8> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='scan_service' scope='function' baseid='xnat_tests.py'>
              request: <SubRequest 'scan_service' for <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>>
          finish pytest_fixture_setup --> <function scan_service.<locals>._scan_service at 0x10e8c2268> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='filename' scope='function' baseid=''>
              request: <SubRequest 'filename' for <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>>
          finish pytest_fixture_setup --> T1.nii.gz [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'xnat_tests.py::TestCloudUploads::()::test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'xnat_tests.py::TestCloudUploads::()::test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'xnat_tests.py::TestCloudUploads::()::test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='factoryboy_request' scope='function' baseid=''>
              request: <SubRequest 'factoryboy_request' for <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>>
          finish pytest_fixture_setup --> <pytest_factoryboy.plugin.Request object at 0x10e8c1dd8> [hook]
          pytest_factoryboy_done [hook]
              request: <FixtureRequest for <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>>
          finish pytest_factoryboy_done --> [] [hook]
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>
          matched marked file 'celery.app.control' (from 'celery') [assertion]
          find_module called for: celery.app.control [assertion]
          found cached rewritten pyc for '/Users/katie/anaconda/lib/python3.6/site-packages/celery/app/control.py' [assertion]
          early skip of rewriting module: billiard.common [assertion]
          early skip of rewriting module: cPickle [assertion]
          early skip of rewriting module: kombu.pidbox [assertion]
          matched marked file 'celery.loaders.app' (from 'celery') [assertion]
          find_module called for: celery.loaders.app [assertion]
          found cached rewritten pyc for '/Users/katie/anaconda/lib/python3.6/site-packages/celery/loaders/app.py' [assertion]
          matched marked file 'celery.loaders.base' (from 'celery') [assertion]
          find_module called for: celery.loaders.base [assertion]
          found cached rewritten pyc for '/Users/katie/anaconda/lib/python3.6/site-packages/celery/loaders/base.py' [assertion]
          matched marked file 'celery.app.amqp' (from 'celery') [assertion]
          find_module called for: celery.app.amqp [assertion]
          found cached rewritten pyc for '/Users/katie/anaconda/lib/python3.6/site-packages/celery/app/amqp.py' [assertion]
          matched marked file 'celery.utils.saferepr' (from 'celery') [assertion]
          find_module called for: celery.utils.saferepr [assertion]
          found cached rewritten pyc for '/Users/katie/anaconda/lib/python3.6/site-packages/celery/utils/saferepr.py' [assertion]
          matched marked file 'celery.app.routes' (from 'celery') [assertion]
          find_module called for: celery.app.routes [assertion]
          found cached rewritten pyc for '/Users/katie/anaconda/lib/python3.6/site-packages/celery/app/routes.py' [assertion]
          early skip of rewriting module: kombu.transport.redis [assertion]
          early skip of rewriting module: kombu.utils.eventio [assertion]
          early skip of rewriting module: kombu.utils.scheduling [assertion]
          early skip of rewriting module: kombu.transport.virtual [assertion]
          early skip of rewriting module: kombu.transport.virtual.base [assertion]
          early skip of rewriting module: kombu.transport.base [assertion]
          early skip of rewriting module: kombu.message [assertion]
          early skip of rewriting module: kombu.utils.time [assertion]
          early skip of rewriting module: kombu.transport.virtual.exchange [assertion]
          early skip of rewriting module: kombu.utils.text [assertion]
          early skip of rewriting module: redis [assertion]
          early skip of rewriting module: redis.client [assertion]
          early skip of rewriting module: redis._compat [assertion]
          early skip of rewriting module: redis.connection [assertion]
          early skip of rewriting module: distutils [assertion]
          early skip of rewriting module: distutils.version [assertion]
          early skip of rewriting module: redis.exceptions [assertion]
          early skip of rewriting module: redis.utils [assertion]
          early skip of rewriting module: hiredis [assertion]
          early skip of rewriting module: redis.lock [assertion]
          early skip of rewriting module: redis.sentinel [assertion]
          early skip of rewriting module: boto3.s3 [assertion]
          early skip of rewriting module: boto3.s3.inject [assertion]
          early skip of rewriting module: boto3.s3.transfer [assertion]
          early skip of rewriting module: s3transfer [assertion]
          early skip of rewriting module: s3transfer.compat [assertion]
          early skip of rewriting module: s3transfer.exceptions [assertion]
          early skip of rewriting module: s3transfer.manager [assertion]
          early skip of rewriting module: s3transfer.utils [assertion]
          early skip of rewriting module: s3transfer.futures [assertion]
          early skip of rewriting module: s3transfer.download [assertion]
          early skip of rewriting module: s3transfer.tasks [assertion]
          early skip of rewriting module: s3transfer.upload [assertion]
          early skip of rewriting module: s3transfer.copies [assertion]
          early skip of rewriting module: s3transfer.delete [assertion]
          early skip of rewriting module: s3transfer.bandwidth [assertion]
          early skip of rewriting module: s3transfer.subscribers [assertion]
          early skip of rewriting module: xnat.search [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'xnat_tests.py::TestCloudUploads::()::test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'xnat_tests.py::TestCloudUploads::()::test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'xnat_tests.py::TestCloudUploads::()::test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>
            nextitem: <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='factoryboy_request' scope='function' baseid=''>
              request: <SubRequest 'factoryboy_request' for <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='filename' scope='function' baseid=''>
              request: <SubRequest 'filename' for <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='scan_service' scope='function' baseid='xnat_tests.py'>
              request: <SubRequest 'scan_service' for <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='scan_service' scope='function' baseid='xnat_tests.py'>
              request: <SubRequest 'scan_service' for <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='mocker' scope='function' baseid=''>
              request: <SubRequest 'mocker' for <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='scan_service' scope='function' baseid='xnat_tests.py'>
              request: <SubRequest 'scan_service' for <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='db' scope='function' baseid=''>
              request: <SubRequest 'db' for <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='scan_service' scope='function' baseid='xnat_tests.py'>
              request: <SubRequest 'scan_service' for <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='db' scope='function' baseid=''>
              request: <SubRequest 'db' for <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='app' scope='function' baseid=''>
              request: <SubRequest 'app' for <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'xnat_tests.py::TestCloudUploads::()::test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'xnat_tests.py::TestCloudUploads::()::test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'xnat_tests.py::TestCloudUploads::()::test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: xnat_tests.py::TestCloudUploads::()::test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]
            location: ('xnat_tests.py', 48, 'TestCloudUploads.test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>
          nextitem: None
        pytest_runtest_logstart [hook]
            nodeid: xnat_tests.py::TestCloudUploads::()::test_nifti_uploads_to_cloud[structural.nii-scan_service0]
            location: ('xnat_tests.py', 48, 'TestCloudUploads.test_nifti_uploads_to_cloud[structural.nii-scan_service0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='app' scope='function' baseid=''>
              request: <SubRequest 'app' for <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>>
          finish pytest_fixture_setup --> <Flask 'cookiecutter_mbam'> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='db' scope='function' baseid=''>
              request: <SubRequest 'db' for <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>>
          early skip of rewriting module: pysqlite2 [assertion]
          finish pytest_fixture_setup --> <SQLAlchemy engine=sqlite://> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='mocker' scope='function' baseid=''>
              request: <SubRequest 'mocker' for <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>>
          finish pytest_fixture_setup --> <pytest_mock.MockFixture object at 0x111034d68> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='scan_service' scope='function' baseid='xnat_tests.py'>
              request: <SubRequest 'scan_service' for <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>>
          finish pytest_fixture_setup --> <function scan_service.<locals>._scan_service at 0x1110b1f28> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='filename' scope='function' baseid=''>
              request: <SubRequest 'filename' for <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>>
          finish pytest_fixture_setup --> structural.nii [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'xnat_tests.py::TestCloudUploads::()::test_nifti_uploads_to_cloud[structural.nii-scan_service0]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'xnat_tests.py::TestCloudUploads::()::test_nifti_uploads_to_cloud[structural.nii-scan_service0]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'xnat_tests.py::TestCloudUploads::()::test_nifti_uploads_to_cloud[structural.nii-scan_service0]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='factoryboy_request' scope='function' baseid=''>
              request: <SubRequest 'factoryboy_request' for <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>>
          finish pytest_fixture_setup --> <pytest_factoryboy.plugin.Request object at 0x10ef1ce48> [hook]
          pytest_factoryboy_done [hook]
              request: <FixtureRequest for <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>>
          finish pytest_factoryboy_done --> [] [hook]
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'xnat_tests.py::TestCloudUploads::()::test_nifti_uploads_to_cloud[structural.nii-scan_service0]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'xnat_tests.py::TestCloudUploads::()::test_nifti_uploads_to_cloud[structural.nii-scan_service0]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'xnat_tests.py::TestCloudUploads::()::test_nifti_uploads_to_cloud[structural.nii-scan_service0]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>
            nextitem: None
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='factoryboy_request' scope='function' baseid=''>
              request: <SubRequest 'factoryboy_request' for <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='filename' scope='function' baseid=''>
              request: <SubRequest 'filename' for <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='scan_service' scope='function' baseid='xnat_tests.py'>
              request: <SubRequest 'scan_service' for <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='scan_service' scope='function' baseid='xnat_tests.py'>
              request: <SubRequest 'scan_service' for <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='mocker' scope='function' baseid=''>
              request: <SubRequest 'mocker' for <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='scan_service' scope='function' baseid='xnat_tests.py'>
              request: <SubRequest 'scan_service' for <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='db' scope='function' baseid=''>
              request: <SubRequest 'db' for <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='scan_service' scope='function' baseid='xnat_tests.py'>
              request: <SubRequest 'scan_service' for <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='db' scope='function' baseid=''>
              request: <SubRequest 'db' for <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='app' scope='function' baseid=''>
              request: <SubRequest 'app' for <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='mocker' scope='function' baseid=''>
              request: <SubRequest 'mocker' for <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='mocker' scope='function' baseid=''>
              request: <SubRequest 'mocker' for <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='pytestconfig' scope='session' baseid=''>
              request: <SubRequest 'pytestconfig' for <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='pytestconfig' scope='session' baseid=''>
              request: <SubRequest 'pytestconfig' for <Function 'test_nifti_uploads_to_cloud[T1.nii.gz-scan_service0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_nifti_uploads_to_cloud[structural.nii-scan_service0]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'xnat_tests.py::TestCloudUploads::()::test_nifti_uploads_to_cloud[structural.nii-scan_service0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'xnat_tests.py::TestCloudUploads::()::test_nifti_uploads_to_cloud[structural.nii-scan_service0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'xnat_tests.py::TestCloudUploads::()::test_nifti_uploads_to_cloud[structural.nii-scan_service0]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: xnat_tests.py::TestCloudUploads::()::test_nifti_uploads_to_cloud[structural.nii-scan_service0]
            location: ('xnat_tests.py', 48, 'TestCloudUploads.test_nifti_uploads_to_cloud[structural.nii-scan_service0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
    finish pytest_runtestloop --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session 'tests'>
        exitstatus: 0
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x10e55ba58>
          exitstatus: 0
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x10a6f9f60>
    finish pytest_unconfigure --> [] [hook]
